---
import LayoutProyecto from "../../../layouts/LayoutProyecto.astro";
const loadingCards = Array.from({ length: 5 });
---

<LayoutProyecto title="DÃ­a 42" subtitle="Live User Filter">
  <div class="container dia42">
    <main>
      <div class="userFilter">
        <header>
          <h1>Live user Filter</h1>
          <p>Search by name and/or location</p>
        </header>
        <input
          type="search"
          name="search"
          id="search-user"
          placeholder="Search"
          class="userSearch"
        />
      </div>

      <div class="usersList">
        {
          loadingCards.map(() => (
            <div class="userCard">
              <div class="userImageLoading loading" />
              <div class="userInfo">
                <h2 class="userNameLoading loading" />
                <p class="userLocationLoading loading" />
              </div>
            </div>
          ))
        }
      </div>
    </main>
  </div>
</LayoutProyecto>

<style is:inline>
  .userImageLoading {
    border-radius: 50%;
    height: 50px;
    width: 50px;
  }

  .userNameLoading {
    height: 16px;
    width: 90px;
    margin-bottom: 1rem;
  }

  .userLocationLoading {
    height: 16px;
    width: 130px;
  }

  .loading {
    background-image: linear-gradient(
      to right,
      #f6f7f8 0%,
      #edeef1 10%,
      #f6f7f8 20%,
      #f6f7f8 100%
    );
    background-size: 200% 100%;
    animation: bgAnimated 1s linear infinite;
  }

  @keyframes bgAnimated {
    0% {
      background-position: 50% 0;
    }
    100% {
      background-position: -150% 0;
    }
  }

  .dia42 main {
    box-shadow: 0px 2px 5px #ddd;
    border-radius: 8px;
    overflow: hidden;
    max-width: 320px;
  }

  .dia42 {
    min-height: 70vh;
    display: grid;
    place-content: center;
    font-family: Arial, Helvetica, sans-serif;
  }

  .dia42 .userFilter {
    background-color: var(--celeste-oscuro);
    color: #fff;
    padding: 2rem 1.2rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 320px;

    & h1 {
      font-weight: bold;
    }

    & p {
      font-size: small;
      color: #eee;
      font-weight: bold;
    }

    & input {
      border-radius: 25px;
      padding: 0.4rem 1rem;
      color: #fff;
      background-color: var(--azul-oscuro);
      outline: none;
    }
  }

  .dia42 .usersList {
    display: flex;
    flex-direction: column;
    height: 400px;
    overflow-y: scroll;
  }

  .dia42 .userCard {
    max-width: 320px;
    display: flex;
    justify-content: start;
    gap: 1.5rem;
    align-items: center;
    padding: 1rem 0rem 1rem 2rem;
    border-bottom: 1px solid #eee;
  }

  .dia42 .userImage {
    background-repeat: no-repeat;
    height: 50px;
    width: 50px;
    background-size: contain;
    border-radius: 50%;
    display: block;
  }

  .userName {
    font-weight: bold;
  }

  .userLocation {
    font-size: small;
  }

  @media (max-width: 600px) {
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const userList = document.querySelector(".usersList");
    const urlUsersApi = "https://randomuser.me/api?results=50";
    const inputSearchUsers = document.querySelector(".userSearch");

    if (userList) {

      getusers();

      async function getusers() {
        await fetch(urlUsersApi)
          .then((response) => response.json())
          .then((data) => {
            completeList(data.results);

            filterUsers(data.results);
          });
      }

      function filterUsers(data) {
        let filterData;
        let word;

        inputSearchUsers.addEventListener("input", () => {
          userList.innerHTML = "";
          //@ts-ignore
          word = inputSearchUsers.value.toLowerCase();

          //filtrar datos
          filterData = data.filter((user) => {
            if (
              user.name.first.toLowerCase().includes(word) ||
              user.name.last.toLowerCase().includes(word) ||
              user.location.country.toLowerCase().includes(word) ||
              user.location.city.toLowerCase().includes(word)
            ) {
              return true;
            } else {
              return false;
            }
          });

          //@ts-ignore
          if (word.trim() == "") {
            completeList(data);
          } else {
            completeList(filterData);
          }
        });
      }

      function completeList(data) {
        userList.innerHTML = "";
        data.forEach((user) => {
          const userCard = `<div class="userCard">
        <div class="userImage" style='background-image: url(${user.picture.thumbnail})'></div>
        <div class="userInfo">
          <h2 class="userName">${user.name.first + " " + user.name.last}</h2>
          <p class="userLocation">${user.location.city + ", " + user.location.country}</p>
        </div>
      </div>`;
          userList.insertAdjacentHTML("beforeend", userCard);
        });
      }
    }
  });
</script>
