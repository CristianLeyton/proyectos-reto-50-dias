---
import LayoutProyecto from "../../../layouts/LayoutProyecto.astro";

const loadingCards = Array.from({ length: 35 });
---

<LayoutProyecto title="DÃ­a 37" subtitle="Pokedex">
  <div class="container dia37">
    {
      loadingCards.map(() => (
        <div class="card-loading">
          <div class="info">
            <span class="name loading" />
            <span class="number loading" />
          </div>
          <div class="types">
            <span class="type loading" />
          </div>
        </div>
      ))
    }
  </div>
</LayoutProyecto>

<style is:inline>
  .card-loading {
    padding: 10px;
    border-radius: 12px;
    width: 185px;
    height: 120px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
    background-color: #ececec;
  }

  .card-loading .name {
    min-width: 80px;
    min-height: 20px;
    border-radius: 10px;
  }

  .card-loading .number,
  .card-loading .type {
    min-width: 50px;
    min-height: 20px;
    border-radius: 10px;
  }

  .loading {
    background-image: linear-gradient(
      to right,
      #f6f7f8 0%,
      #edeef1 10%,
      #f6f7f8 20%,
      #f6f7f8 100%
    );
    background-size: 200% 100%;
    animation: bgAnimated 1s linear infinite;
  }

  @keyframes bgAnimated {
    0% {
      background-position: 50% 0;
    }
    100% {
      background-position: -150% 0;
    }
  }
  .dia37 {
    min-height: 70vh;
    padding-top: 10px;
    padding-bottom: 20px;
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .dia37 .image {
    position: absolute;
    width: 80px;
    height: 80px;
    right: 10px;
    bottom: 5px;
    background-repeat: no-repeat;
    background-size: contain;
    background-position: bottom right;
  }

  .card {
    padding: 10px;
    border-radius: 12px;
    width: 185px;
    height: 120px;
    background-color: #757575;
    background-repeat: no-repeat;
    background-size: 50%;
    background-position: 87px 60px;
    color: white;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    position: relative;
  }

  .types {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .type {
    font-size: 10px;
    background-color: #ffffff45;
    width: fit-content;
    padding: 4px 8px;
    border-radius: 15px;
    text-transform: capitalize;
  }

  .info {
    font-size: small;
    font-weight: bold;
    display: flex;
    width: 100%;
    justify-content: space-between;
  }

  .name {
    text-transform: capitalize;
  }

  @media (max-width: 600px) {
  }
</style>

<script>
  //importar imagen desde ruta local y no de la carpeta public
  import imgPobeball from "./ball.webp";

  document.addEventListener("astro:page-load", () => {
    const urlApi = "https://pokeapi.co/api/v2/pokemon?offset=0&limit=151";
    const container = document.querySelector(".dia37");

    const colorTypes = {
      grass: "#48d0b0",
      fire: "#fb6c6c",
      water: "#77bdfe",
      bug: "#a8b91f",
      normal: "#a7a877",
      poison: "#a7a877",
      electric: "#ffce4b",
      ground: "#e1c068",
      fairy: "#a890f0",
      fighting: "#c03128",
      psychic: "#f95887",
      rock: "#b8a038",
      ghost: "#705998",
      ice: "#99d7d8",
      dragon: "#7138f8",
    };

    if (urlApi) {
      fetchPokemons(urlApi);

      async function fetchPokemons(url) {
        try {
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error("Error: " + response.statusText);
          }
          const data = await response.json();

          const pokemonPromises = data.results.map((pokemon) =>
            fetch(pokemon.url).then((res) => res.json())
          );

          const results = await Promise.allSettled(pokemonPromises);

          const pokemons = results
            .filter((result) => result.status === "fulfilled")
            .map((result) => result.value);

          console.log(pokemons);

                  if (container) {
            container.innerHTML = "";
          }

          pokemons.forEach((data) => {
            let itemType = data.types[0].type.name;
            itemType = itemType.toString();

            const card = document.createElement("div");
            card.classList.add("card");
            card.style.backgroundImage = `url(${imgPobeball.src})`;
            card.style.backgroundColor = colorTypes[itemType];

            const infoCard = `<div class="info">
                        <span class="name">${data.name}</span>
                        <span class="number">#00${data.id}</span>
                        </div>`;
            card.insertAdjacentHTML("beforeend", infoCard);

            const types = document.createElement("div");
            types.classList.add("types");
            data.types.forEach((item) => {
              const type = `<span class="type">${item.type.name}</span>`;
              types.insertAdjacentHTML("beforeend", type);
            });
            card.appendChild(types);

            const image = document.createElement("div");
            image.classList.add("image");
            image.style.backgroundImage = `url(${data.sprites.other["official-artwork"].front_default})`;
            card.appendChild(image);

            if (container) {
              container.appendChild(card);
            }
          });
        } catch (error) {
          console.error("Hubo un problema con la solicitud Fetch:", error);
        }
      }
    }
  });
</script>
